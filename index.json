[{"categories":["API"],"contents":"When it comes to API integration with systems that have sensitive data, security is something you could never compromise. Yet, you need to find a balance on how you design a solution that is secure and optimal as it should be, so it doesn’t choke on scaling.\nRequirement You have a Single Sign-on AuthProvider setup using OpenID Connect for the users to log in to Salesforce. You need to pass the user’s access token in the API call, so the service can authenticate the user before executing the API request. Also, the access token provided by the AuthProvider is valid only for 15 minutes for security reasons and the refresh token is valid for 12 hours.\nUsing AccessToken to validate user In a typical solution, you might get the access token and add it to your HttpRequest and make the API call. The server might check the validity of the token to make sure the user is in session and an authorized user.\nHowever, since the access token is valid for only 15 minutes, you need to make sure the token you add to your HttpRequest is valid and avoid a 401 unauthorized response. Let’s see how you can handle this.\nAuth.AuthToken class Salesforce provides the Auth.AuthToken class to retrieve and revoke the access token. Let\u0026rsquo;s focus on using two methods that can be used in this use case.\ngetAccessToken(authProviderId, providerName) refreshAccessToken(authProviderId, providerName, oldAccessToken) When you call the getAccessToken() method, for the first time, Salesforce makes a call to your AuthProvider to get the access token and holds in the cache — meaning Salesforce doesn’t go to the AuthProvider each time for getAccessToken() call, you get the same token until it’s refreshed.\nSo, how to make sure you pass a valid token in the API request every time, without making a call to the AuthProvider to introspect if the token is valid or not? The easiest way is to make a refreshAccessToken() call to get a “refreshed” accessToken and use it to make the API request. But it might be expensive too, to make a refreshAccessToken() call every time you need to make an API call — this would be an issue if the number of calls you make in a given time is too high. Another option is to handle 401 unauthorized error and retry the API call with a refreshed access token – which could be tedious and result in unnecessary calls that could count towards your API limit.\nSolution — Validating the access token locally { ... \u0026quot;iat\u0026quot;: 1597374960, \u0026quot;exp\u0026quot;: 1597378240, ... } Check the exp against the current time, if the token is expired, make a refreshAccessToken() call to get a new access token. To be on the safer side, I’d add a buffer to the current time — say 60 seconds — and compare against the exp time, if it’s still within the current time ( minus 1 minute), then use the same token, else, get a new refreshed token.\nThis way you can avoid,\n Making unnecessary calls to refreshAccessToken() 401 unauthorized errors from the service provider for an invalid token and retry API calls with a valid tokens Introspection calls to the auth provider to validate the access token’s validity.  This helps in reducing the number of unnecessary API calls you make to the service provider and the AuthProvider and avoid API limit issues while making secure API calls.\nClick here to read this article on Medium.\n","permalink":"https://www.bergin.io/2020/08/14/using-auth.authtoken-for-api-integrations/","tags":["Access token","API","Integration","OAuth2","Refresh token","Salesforce","Token"],"title":"Using Auth.AuthToken for API integrations"},{"categories":["Certification"],"contents":"I had been working hard and eagerly waiting for this day. Today, I passed the last requirement — Sharing \u0026amp; Visibility Designer certification to get my Salesforce Certified Application Architect certification.Here are some of the resources I referenced,\n Sharing \u0026amp; Visibility Trailmix from Trailhead. Sharing \u0026amp; Visibility %mdTrailmixfrom Trailhead.  Watched YouTube videos of,\n Ladies Be Artchitects Decode SFCertifications  Focus on Force – I used both the study guide \u0026amp; the practice exam. The practice exam helped a lot in the final review. The reasoning for the answers and reference links were very helpful.\nWhile using the above resources, I put together my own random notes for final review and it was handy in the last couple of days to brush up.With these certifications I’ve earned so far, I think the knowledge one gains from the work experience plays a key role. It definitely helped me a lot.\nSo, my next stop? Salesforce Certified Integration Architecture Designer to climb the other side of the #journeyToCTA pyramid.And, finally, a big thank you to all that are helping in this journey, especially to my family for being on my side during my preparation.\n","permalink":"https://www.bergin.io/2020/06/01/salesforce-certified-application-architect/","tags":["Certification","journeyToCTA","Salesforce","Trailhead"],"title":"Salesforce Certified Application Architect"},{"categories":["API"],"contents":"Salesforce provides standard APIs for many of the actions one would need to perform.\n Request information about the version of the API Get detail information about a Salesforce object like Account, Case or Custom Object Perform CRUD operation on a Salesforce standard or custom object  This makes it easier to integrate with Salesforce with these standard APIs. Let’s see how to create a case using the Rest API.\n Get access token – here we’ll use the username-password flow to get the OAuth  Bearer \u0026lt;access_token\u0026gt; POST /services/oauth2/token HTTP/1.1 Host: login.salesforce.com X-PrettyPrint: 1 Content-Type: application/x-www-form-urlencoded grant_type=password\u0026amp;amp; client_id=3MVG9lKcPoNINVBIPJjdw1J9LLM82HnFVVX19KY1uA5mu0QqEWhqKpoW3svG3XHrXDiCQjK1mdgAvhCscA9GE\u0026amp;amp; client_secret=1955279925675241571\u0026amp;amp; username=testuser%40salesforce.com\u0026amp;amp; password=mypassword123456fgshjdfsdljfhsdhfsdfs token using Client ID \u0026amp; Secret.\nThe next step is to use the access token and the instance_url from the response from Step 1  { \u0026quot;access_token\u0026quot;:\u0026quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026quot;, \u0026quot;instance_url\u0026quot;: \u0026quot;https://yourdomain.my.salesforce.com\u0026quot;, \u0026quot;id\u0026quot;:\u0026quot;https://login.salesforce.com/id/XXXXXXXXXXXXXXXXXX/XXXXXXXXXXXXXXXXXX\u0026quot;, \u0026quot;token_type\u0026quot;: \u0026quot;Bearer\u0026quot;, \u0026quot;issued_at\u0026quot;: \u0026quot;1454735969118\u0026quot;, \u0026quot;signature\u0026quot;: \u0026quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX=\u0026quot; } and make the actual RestAPI call to create the case.\nGet Access Token – Request Set up a connected app in Salesforce and get the Client ID and Secret. Create an API only user and get the username, password, and security token.\nNote: the password in the request includes password \u0026amp; security-token combined.\nPOST /services/oauth2/token HTTP/1.1 Host: login.salesforce.com X-PrettyPrint: 1 Content-Type: application/x-www-form-urlencoded grant_type=password\u0026amp;amp; client_id=3MVG9lKcPoNINVBIPJjdw1J9LLM82HnFVVX19KY1uA5mu0QqEWhqKpoW3svG3XHrXDiCQjK1mdgAvhCscA9GE\u0026amp;amp; client_secret=1955279925675241571\u0026amp;amp; username=testuser%40salesforce.com\u0026amp;amp; password=mypassword123456fgshjdfsdljfhsdhfsdfs Response { \u0026quot;access_token\u0026quot;:\u0026quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026quot;, \u0026quot;instance_url\u0026quot;: \u0026quot;https://yourdomain.my.salesforce.com\u0026quot;, \u0026quot;id\u0026quot;:\u0026quot;https://login.salesforce.com/id/XXXXXXXXXXXXXXXXXX/XXXXXXXXXXXXXXXXXX\u0026quot;, \u0026quot;token_type\u0026quot;: \u0026quot;Bearer\u0026quot;, \u0026quot;issued_at\u0026quot;: \u0026quot;1454735969118\u0026quot;, \u0026quot;signature\u0026quot;: \u0026quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX=\u0026quot; } Call the create Case RestAPI with access_token from the previous step Use the instance_url and the access_token from the previous step to make the call to create a Case.\nUse access_token in Authorization Header as Authorization:\n Bearer \u0026lt;access_token\u0026gt; Use the \u0026lt;instance_url\u0026gt; along with the endpoint to access the intended API.\nCreate Case RestAPI request\nPOST services/data/v42.0/sobjects/Case Host: \u0026lt;instance_url\u0026gt; Authorization: Bearer \u0026lt;access_token\u0026gt; Content-Type: application/json { \u0026quot;Subject\u0026quot;: \u0026quot;subject goes here\u0026quot;, ... ... } Response 201 Created { \u0026quot;id\u0026quot;: \u0026quot;a002800000PA0AzAAL\u0026quot;, \u0026quot;success\u0026quot;: true, \u0026quot;errors\u0026quot;: [] } That’s it, you’ve created a case using RestAPI!\nHere’s are some useful links,\nREST API:\nhttps://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_what_is_rest_api.htmAuthentication:\nhttps://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_understanding_authentication.htmCreate Record Example: (For creating case, replace “Account” with “Case”), use appropriate request body.)\nhttps://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_create.htmCase Object \u0026amp; Fields:\nhttps://developer.salesforce.com/docs/atlas.en-us.object_reference.meta/object_reference/sforce_api_objects_case.htm","permalink":"https://www.bergin.io/2018/11/06/salesforce-rest-api-create-case/","tags":["Case","Insert","REST API"],"title":"Salesforce Rest API - Create Case"},{"categories":["API"],"contents":"At times, a simple configuration can end up showing scary messages like these.\nSystem.CalloutException: Received fatal alert: handshake_failure This turns out to be a mutual TLS issue that you may want to look at these configurations first before digging more. For me it also said, contact support with the error ID: xxxxxxxx-xxxxx.\nCheck your certificate if it’s properly signed, not expired and active. Check the named credentials to make sure it has the right certificate associated. if both these are good, then check the target server, if it’s accepting your cert. A quick check on these things could get things cleared.\nHappy coding! 😀\n","permalink":"https://www.bergin.io/2018/08/16/system.calloutexception-received-fatal-alert-handshake_failure/","tags":["calloutexception","failure","handshake","mutual tls","two-way ssl"],"title":"System.CalloutException: Received fatal alert: handshake_failure"},{"categories":["Apex"],"contents":"This is a common question that comes up and it’s very simple to do. From your IDE, in your -meta.xml file, change the to Deleted.\n\u0026lt;ApexClass xmlns=\u0026quot;http://soap.sforce.com/2006/04/metadata\u0026quot;\u0026gt; \u0026lt;apiVersion\u0026gt;41.0\u0026lt;/apiVersion\u0026gt; \u0026lt;status\u0026gt;Deleted\u0026lt;/status\u0026gt; \u0026lt;/ApexClass\u0026gt; Make sure you check the code coverage and take necessary action.","permalink":"https://www.bergin.io/2018/07/27/how-to-delete-class-from-production-org/","tags":["Apex","Class","Production","Salesforce"],"title":"How to delete class from Production org"},{"categories":["API"],"contents":"When an external system makes a call to a Salesforce Rest API, to get the auth token, you call the oauth2/token api with username-password authentication flow takes the credentials in plain text. This raises security concerns.\n\nLooks like there’s no alternative other than passing username \u0026amp; password and clientId \u0026amp; secrete as plain text in the username-password authentication flow.\ngrant_type=password\u0026amp;client_id=3MVG9lKcPoNINVBIPJjdw1J9LLM82Hn FVVX19KY1uA5mu0QqEWhqKpoW3svG3XHrXDiCQjK1mdgAvhCscA9GE\u0026amp;client_secret= 1955279925675241571\u0026amp;username=testuser%40salesforce.com\u0026amp;password=mypassword123456 I’ve raised an idea to enable a way to securely send the clientId \u0026amp; secret and the username \u0026amp; password. Please vote for this idea at https://success.salesforce.com/ideaView?id=0873A000000EA5yQAG.If you have other solutions for this, please share it here.\n","permalink":"https://www.bergin.io/2018/06/15/salesforce-rest-api-securely-passing-credentials-in-username-password-authentication-flow/","tags":["Authentication Flow","REST API","Username-Password"],"title":"Salesforce Rest API Securely passing credentials in Username-password authentication flow"},{"categories":["Certification"],"contents":"I stumbled on this timeline chart when I was cleaning up my old laptop. You may be someone like me that had the old certification. The time is running out. See the chart below or download the pdf from here. \n","permalink":"https://www.bergin.io/2018/01/29/force.com-developer-certification-expiration-timeline/","tags":["Certification","Expiration","Force.com Developer","timeline"],"title":"Force.com Developer Certification Expiration Timeline"},{"categories":["Certification"],"contents":"In my previous post, I wrote about taking certification at Dreamforce. In this post, I’ll share some experiences on certification and the advantages of taking this at Dreamforce.\nWhy at Dreamforce? Let’s begin with why you would want to do it at Dreamforce. First, you pay only 50% of your exam fees when you take the exam at Dreamforce. From my experience, it was better at Dreamforce than taking the exam in the regular proctored centers. You get to meet people with the same career direction and get to network and help each other. I met a few people and got friends with them. We now share knowledge, materials on our future exams, and get to share tips. Another thing is, the support you get from Salesforce people is very helpful if you have issues with the account/email tied to your certification. I had an issue with my certification registration and it was easy to go directly to the helpdesk to get it resolved. So, if you can, try to take the exam at Dreamforce.\nHow to face Certification session at Dreamforce The first-ever session I attended at #DF17was the session about facing the certification exam. If you are attempting your first certification exam it would be very useful, it helps if you already had taken the exam too. You get to ask questions to the people that designed the exam. Unfortunately, they don’t reveal the questions ;-).\nTrailhead! Trailhead! Trailhead! The best way to start your preparation for the certification is Trailhead. Go through your study guide and look at the topics and create a Trailmix with all the related trails and start your journey through the trails. Trailmix is an awesome feature, that I’ve started exploring and it’s very useful.The other means to prepare is using the actual documentation available online. The official certification pagehas a lot of resources and links that you’d need. If you can take up the in-person or online classes, you have that option which I used for my first Force.com Developer (401) certification back in 2013.\nPractice Exams Practice exams are a good way to familiarize yourself with the exam format. Salesforce has started offering practice exams for a fee. See the webassessor to see the practice exams available. There are many other practice exams and questions out there online. If you plan to use those resources, I’d suggest not relying on the answers provided as I’ve seen many wrong answers in them.\nWhile taking the exam When you appear for the exam, relax your mind, drink a lot of water before you go and take a water bottle with you. Once you are in, you cannot go out in the middle of the exam. To finish all your bio needs before the exam.\n You get 3 sheets of plain paper and pencil for you to write/draw that will help you during the exam. You cannot take the paper out when you go out of the exam room. While answering, skip the answer options that you are sure is not the right option, so you have fewer options to deal with. If you are not sure about a question, don’t spend more time on it, mark it for review and move on. You can come back after you’re done with all the questions and look into it. The marked for review questions have a * next to it. You can also review all the questions not just the marked for review questions before you are done if need be and have time for it. Marking for review helps if you are running out of time in the end and want to quickly go back to a few questions to make sure you have the right answer.  Results You get the result instantly once you submit the exam followed by an email with the exam results, score %, and the certificate pdf file. A good thing now is, you get the percentage you scored on each topic. It helped me when I didn’t pass one of the exams I tried and I’m using that score to focus more on those topics. So, if you are someone who passed or working on “Integration Architecture Designer”, please ping me, let’s help each other 🙂\nThe transition from Force.com Developer (401) If you are someone like me that didn’t realize that your Force.com Developer Certification has expired, you may still have a chance. Reach out to the SalesforceU support and ask if you can take the transition exam to Salesforce Platform App Builder, you may still have luck like I had and got certified.\nSome of the helpful resources are,\nLinkedIn – Salesforce certification GroupSalesforce Certification Study GroupSalesforce Certification Professional Grouphttp://www.salesforceben.comhttp://www.sfdc99.comWish you the best with your certifications. If you’d like to connect with me, please contact me on Twitter, or LinkedIn.","permalink":"https://www.bergin.io/2017/12/02/salesforce-certification-transition-exam/","tags":["Dreamforce","Trailhead","Transition Exam"],"title":"Salesforce Certification Transition Exam"},{"categories":["Dreamforce"],"contents":"Dreamforce 2017 was my second time at this ever-growing monstrous conference. When you sit to work on your agenda, you will be overwhelmed by the range of sessions available. The first thing I did was to mark my favorite sessions and then realized I ended up with a lot of overlapping sessions. However, if you spent little more time in prioritizing and planning, this can be done and make a lot out of this tremendous conference. Let me share what I learned from my experience.\nCertifications (Pre-conference vs During conference)\nIf you are planning and preparing to be certified, I bet, you’ll not find a better time than Dreamforce to get yourself, your honor, to be a Salesforce Certified Professional. I attempted a couple of certifications and I did that during the conference and passed 2x. That’s something a lesson learned for me (personally). I felt I missed some of the sessions and conference time due to my during conference certifications. I wish I had it done pre-conference, however, if you plan to take on multiple certifications like I attempted, you don’t have a choice. But still, do one of that pre-conference. I’ll write more about the certification and the Force.com developer (401) certification transition in a different post.\nKeynote\nI personally didn’t want to miss some of the important keynotes if not all. My focus was on the keynote by “The Marc Benioff” and of course the Developer Keynote as the top priority and saved others for later. So I “reserved seat” for these Keynotes first.\nBreakout Sessions\nThese are the 40 min sessions that you’d find the long queue to enter and if you are late, you might be turned away if the house is full, yes, believe me. Here as well, I picked the ones that are more important ones to me. Some have reserve seat option. I favorited other sessions I liked so I have it on my agenda to decide later. Another reason being, even if you miss these you can catch up on youtube. So if you haven’t done already, I’d suggest subscribing to the Dreamforce Youtube channel.\nTheatre Sessions\nThese are the 20 mins sessions in the Dev / Admin Zone. I ended up attending this a lot as I was hanging around the Dev zone a lot, I’ll tell why I did that below. These are quick sessions and very useful ones.\nDev / Admin zone demos\nPersonally, this is one of the best things at Dreamforce. The reason I told you that I attended more theatre sessions was this. I tried to stop by almost all of the dev demo booths and listened to “The Engineers / Architects” that worked on all these features we use in Salesforce. I was able to watch demos, listen to them, ask questions and clear things that I was working on in my projects. Try to spend more time here and plan to attend the sessions that you marked favorite in between.\nThe little challenges in the dev zone give you a good learning curve and also “earn” some swags. Yes, unlike previous years, no more free swags or books. You gotta earn the swags and pay for the printed books. Most of the materials you need for Salesforce are available online.\nThe Expo\nThe next important thing was the expo where you can learn how these partners can help us do things easier. Again these demo and discussions with these partners are good lessons you learn.\nTrailhead\n`Trailhead was everywhere! And the way they have built is phenomenal. I didn’t pay much attention to Trailhead prior to #DF17. I personally like the “myTrailhead” they have introduced. I also love the concept of Trailmixes, that lets you group the trails you want to cover for a set goal. There’s a lot to learn there.\nMy strategy worked for me well, I’m catching up on the other keynotes, sessions I missed on YouTube now.\nIf you are planning for Dreamforce 2018 (Sep 25-28), book your hotels now! If possible, try to be at a walking distance to the Moscone Center.\nHappy Dreamforcing !!!\nPS: Please share your comments and feedback and follow me on twitter @bergin__sf let’s be connected.`\n","permalink":"https://www.bergin.io/2017/11/12/dreamforce-2017-experience-and-lessons-learned/","tags":["DF17","Dreamforce"],"title":"Dreamforce 2017 Experience and Lessons Learned"},{"categories":null,"contents":"I’m a Salesforce Certified Application Architect / Developer, 5x certified with 18+ years of experience in Software development, last 10 years in Salesforce Customer Success Platform. I’ve worked implementing Salesforce for a Non-profit, Government, a major Financial institution, and now for Verizon Media (previously known as Aol / Oath).\nConnect with me on Twitter \u0026amp; LinkedIn\n","permalink":"https://www.bergin.io/author/bergin-panimayam/","tags":null,"title":"Bergin Panimayam"}]